class Solution {
    public int longestValidParentheses(String s) {
       int maxans=0;
        int left=0, right=0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='('){
                left++;
            }else{
                right++;
            }
            if(left == right){
                maxans = Math.max(maxans, right * 2);
            }else if(right >= left){
                left=right=0;
            }
        }
        left=0;right=0;
        for(int i=s.length()-1;i>=0;i--){
            if(s.charAt(i)=='('){
                left++;
            }else{
                right++;
            }
            if(left==right){
                maxans = Math.max(maxans, left*2);
            }else if(left>=right){
                left=right=0;
            }
        }
        return maxans;
    }
}
Time Complexity : O(n)
Space Complexity : O(n)

Stack :

class Solution {
    public int longestValidParentheses(String s) {
       int maxans = 0;
        Stack<Integer> stack = new Stack<Integer>();
        stack.push(-1);
        int maxans=0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='('){
                stack.push(i);
            }else{
                stack.pop();
                if(stack.isEmpty()){
                    stack.push(i);
                }else{
                    maxans = Math.max(maxans, i-stack.peek());
                }
            }
        }
        return maxans;
    }
}

Time Complexity : O(n)
Space Complexity : O(n)
