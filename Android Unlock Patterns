class Solution {
    boolean[] visited = new boolean[10];
    int[][] jump = new int[10][10];
    public int numberOfPatterns(int m, int n) {
        jump[1][3] = jump[3][1] = 2;
        jump[1][7] = jump[7][1] = 4;
        jump[7][9] = jump[9][7] = 8;
        jump[3][9] = jump[9][3] = 6;
        jump[4][6] = jump[6][4] = 5;
        jump[2][8] = jump[8][2] = 5;
        jump[1][9] = jump[9][1] = 5;
        jump[3][7] = jump[7][3] = 5;
        int count = 0;
        count += 4*dfs(1,1,0,m,n);
        count += 4*dfs(2,1,0,m,n);
        count += dfs(5,1,0,m,n);
        return count;
    }
    
    public int dfs(int curr, int len, int count, int m, int n) {
        if (len >= m) count++;
        len++;
        if (len > n) return count;
        visited[curr] = true;
        for (int i = 1; i <= 9; i++) 
            if (!visited[i] && (jump[curr][i] == 0 || visited[jump[curr][i]])) 
                count = dfs(i,len,count,m,n);
        visited[curr] = false;
        return count;
    }
}
