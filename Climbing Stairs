** Brute Force **


class Solution {
    int count = 0;
    public int climbStairs(int n) {
        return climb_stairs(0,n);
    }
    public int climb_stairs(int i, int n){
        if(i>n){
            return 0;
        }
        if(i==n){
            return 1;
        }
        return climb_stairs(i+1, n) + climb_stairs(i+2, n);
    }
}
Recursive with Memoization:

class Solution {
    public int climbStairs(int n) {
        int[] memo = new int[n+1];
        return climb_stairs(0, n, memo);
    }
    public int climb_stairs(int i, int n, int[] memo){
        if(i == n){
            return 1;
        }
        if(i>n){
            return 0;
        }
        if(memo[i] > 0){
            return memo[i];
        }
        memo[i] = climb_stairs(i+1, n, memo) + climb_stairs(i+2, n, memo);
        return memo[i];
    }
}

DP solution:
class Solution {
    public int climbStairs(int n) {
        if(n==1){
            return 1;
        }
        int[] dp = new int[n+1];
        dp[1] = 1;
        dp[2] = 2;
        for(int i=3; i<=n; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
}
