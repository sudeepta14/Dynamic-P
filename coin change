class Solution {
    int res = Integer.MAX_VALUE;
    public int coinChange(int[] coins, int amount) {
       Arrays.sort(coins);
        helper(coins, amount, coins.length-1, 0);
         return (res == Integer.MAX_VALUE) ? -1 : res;
    }
    public void helper(int[] coins, int amount, int pos, int count){
        if(pos<0){
            return;
        }
        if(amount % coins[pos] == 0){
            res = Math.min(res, count + amount/coins[pos]);
        }
        for(int i= amount/coins[pos]; i>=0; i--){
            if(count + i >= res-1) return;
            helper(coins, amount - 1*coins[pos], pos-1, count+i);
        }
    }
}

DP:

//dp
        //dp[i] means the minimum coins we use to make up i
        //time o(amount * n), n is types of coin, space o(amount)
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for(int coin : coins){
            for(int i = coin; i <= amount; i++){
                if(dp[i - coin] != Integer.MAX_VALUE){
                    dp[i] = Math.min(dp[i], dp[i - coin] + 1);
                }
            }
        }
        return dp[amount] == Integer.MAX_VALUE? -1 : dp[amount];
        
        Time Cimplexity : O(S*n)
        Space Complexity : O(n2) 
