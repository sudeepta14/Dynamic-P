class Solution {
    public int countSubstrings(String s) {
        int count=0;
        for(int i=0;i<s.length();i++){
            count+=extractPalindrome(s,i,i);//odd length
            count+=extractPalindrome(s,i,i+1);//even length
        }
        return count;
    }
    public int extractPalindrome(String s, int left, int right){
        int count=0;
        while(left>=0 && right<s.length()&& (s.charAt(left)==s.charAt(right))){
            left--;
            right++;
            count++;
        }
        return count;
    }
}

Time Complexity : O(N * 2N)
Space Complexity : O(1)

Dynamic Programming:

class Solution {
    public int countSubstrings(String s) {
      int n = s.length();
        int count = 0;
        int[][] dp = new int[n][n];
        for(int i= n-1; i>=0; i--){
            char c = s.charAt(i);
            for(int j = i; j<n; j++){
                char x = s.charAt(j);
                if(x == c && (j-i < 3 || dp[i+1][j-1] == 1)){
                    dp[i][j] = 1;
                    count++;
                }
            }
        }
        return count;
    }
}

Time Complexity : O(N*N)
Space Complexity : O(1)
