class Solution {
    public int maxCoins(int[] iNums) {
    int[] nums = new int[iNums.length + 2];
    int n = 1;
    for (int x : iNums) if (x > 0) nums[n++] = x;
    nums[0] = nums[n++] = 1;


    int[][] dp = new int[n][n];
    for (int k = 2; k < n; ++k)
        for (int left = 0; left < n - k; ++left) {
            int right = left + k;
            for (int i = left + 1; i < right; ++i)
                dp[left][right] = Math.max(dp[left][right], 
                nums[left] * nums[i] * nums[right] + dp[left][i] + dp[i][right]);
        }

    return dp[0][n - 1];
}
}

class Solution {
    public int maxCoins(int[] nums) {
        int N = nums.length;
        // dp[i][j] means the answer for subarray[i,..,j]
        int[][] dp = new int[N][N];
        return dfs(0, N - 1, 1, 1, nums, dp);
    }
    private int dfs(int st, int ed, int left, int right, int[] nums, int[][] dp) {
        if(st > ed) return 0;
        if(st == ed) return left * right * nums[st];
        if(dp[st][ed] != 0) return dp[st][ed];
        
        int coin = 0;
        for(int i = st; i <= ed; i++) {
            int leftCoin = dfs(st, i - 1, left, nums[i], nums, dp);
            int rightCoin= dfs(i + 1, ed, nums[i],right, nums, dp);
            coin = Math.max(coin, leftCoin + rightCoin + left * nums[i] * right);
        }
        dp[st][ed] = coin;
        return coin;
    }
}
