class Solution {
    public int maxSubArray(int[] nums) {
       int maxSoFar = nums[0], maxEndingHere = nums[0];
        for(int i=1; i<nums.length; i++){
            maxEndingHere = Math.max(maxEndingHere+nums[i], nums[i]);
            maxSoFar = Math.max(maxSoFar, maxEndingHere);
        }
        return maxSoFar;
    }
}

Time Complexity : O(n)
Space Complexity : O(1)


class Solution {
    public int maxSubArray(int[] nums) {
        int max = Integer.MIN_VALUE;
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        max = Math.max(max, nums[0]);
        for(int i=1; i<nums.length; i++){
            dp[i] = dp[i-1] > 0? dp[i-1]+ nums[i] : nums[i];
            max = Math.max(max, dp[i]);
        }
        return max;
    }
}

Time Complexity : O(n)
Space Complexity : 
