class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length(), n =word2.length();
        if (m == 0 || m == 0) return Math.max(m, n);
        
        char[] w1 = word1.toCharArray();
        char[] w2 = word2.toCharArray(); 
        int[][] dp = new int[m + 1][n + 1];
        for (int i = 0; i <= m; i++)
            dp[i][0] = i;
        for (int i = 0; i <= n; i++)
            dp[0][i] = i;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i + 1][j + 1] = (w1[i] == w2[j] ? dp[i][j] : Math.min(Math.min(dp[i][j + 1], dp[i + 1][j]), dp[i][j]) + 1);   
            }
        }
        return dp[m][n];
    }
}

Time Complexity : O(n2)
Space Complexity : O(n2)
